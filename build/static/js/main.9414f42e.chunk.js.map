{"version":3,"sources":["firebase.js","auth.js","polyfill.js","App.js","serviceWorker.js","index.js"],"names":["fireB","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Auth","_this","this","Object","classCallCheck","handleLogin","email","password","cb","dataForm","FormData","append","fetch","method","body","then","response","json","data","authenticated","status","console","log","result","app","auth","signInWithCustomToken","token","catch","error","currentUser","uid","code","message","onAuthStateChanged","user","statusText","region","division","__webpack_exports__","window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","DefaultLayout","React","lazy","Promise","all","__webpack_require__","e","bind","Login","Register","Page404","Page500","App","react_default","a","createElement","react_router_dom","Suspense","fallback","className","react_router","exact","path","name","render","props","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0HAgBeA,UAZDC,gBAAuB,CACjCC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,cACnBC,MAAO,8CCTLC,aACF,SAAAA,IAAc,IAAAC,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAF,GAAAE,KAsBdG,YAAc,SAACC,EAAMC,EAASC,GAG5B,IAAMC,EAAW,IAAIC,SACnBD,EAASE,OAAO,WAAYL,GAC5BG,EAASE,OAAO,WAAYJ,GAW9BK,MAAM,iBAPmB,CACrBC,OAAQ,OACRC,KAAML,IAMLM,KAAK,SAAAC,GAAQ,OAEZA,EAASC,SAIVF,KAAK,SAAAG,GACJjB,EAAKkB,cAAcC,QAAS,EAC7BC,QAAQC,IAAIJ,GACM,OAAfA,EAAKK,SACRf,IAICgB,EAAIC,OAAOC,sBAAsBR,EAAKS,OAAOC,MAAM,SAASC,GAG1DR,QAAQC,IAAIE,EAAIC,OAAOK,YAAYC,KAEnBF,EAAMG,KACHH,EAAMI,UAM3BT,EAAIC,OAAOS,mBAAmB,SAASC,GACjCA,GAEFd,QAAQC,IAAIa,QAYpBvB,MAAM,iBACLG,KAAK,SAAAC,GAAQ,OAEbA,EAASoB,eAGTrB,KAAK,SAAAG,GAAI,OAAIG,QAAQC,IAAIJ,MArF5BhB,KAAKiB,cAAgB,CAACC,QAAO,EAAMiB,OAAO,GAAGC,SAAS,sDAGlD9B,GACJN,KAAKiB,cAAcC,QAAS,EAC5BlB,KAAKiB,cAAckB,OAAS,KAE5B7B,mCAGKA,GACLN,KAAKiB,cAAcC,QAAS,EAC5BlB,KAAKiB,cAAckB,OAAS,GAC5B7B,8CAIA,OAAON,KAAKiB,uBA2IDoB,EAAA,MAAIvC,ulECjIrB,WAEE,GAAmC,oBAAvBwC,OAAOC,YAA6B,OAAO,EAEvD,SAASA,EAAcC,EAAOC,GAC5BA,EAASA,GAAU,CAAEC,SAAS,EAAOC,YAAY,EAAOC,YAAQC,GAChE,IAAIC,EAAMC,SAASC,YAAa,eAEhC,OADAF,EAAIG,gBAAiBT,EAAOC,EAAOC,QAASD,EAAOE,WAAYF,EAAOG,QAC/DE,EAGTP,EAAYW,UAAYZ,OAAOa,MAAMD,UAErCZ,OAAOC,YAAcA,EAbvB,gHCtBMa,wBAAgBC,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,IAAAD,EAAAC,EAAA,MAAA7C,KAAA4C,EAAAE,KAAA,eAGjCC,EAAQP,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,IAAAD,EAAAC,EAAA,MAAA7C,KAAA4C,EAAAE,KAAA,cACzBE,EAAWR,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,IAAAD,EAAAC,EAAA,MAAA7C,KAAA4C,EAAAE,KAAA,cAC5BG,EAAUT,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,IAAAD,EAAAC,EAAA,MAAA7C,KAAA4C,EAAAE,KAAA,cAC3BI,EAAUV,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,IAAAD,EAAAC,EAAA,MAAA7C,KAAA4C,EAAAE,KAAA,cAqBlBK,mLAhBX,OACEC,EAAAC,EAAAC,cAACC,EAAA,WAAD,KACIH,EAAAC,EAAAC,cAACF,EAAAC,EAAMG,SAAP,CAAgBC,SAhBJL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,oCAAf,eAiBVN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,KAAK,aAAaC,OAAQ,SAAAC,GAAK,OAAIZ,EAAAC,EAAAC,cAACP,EAAUiB,MACzEZ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,KAAK,gBAAgBC,OAAQ,SAAAC,GAAK,OAAIZ,EAAAC,EAAAC,cAACN,EAAagB,MAClFZ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,KAAK,WAAWC,OAAQ,SAAAC,GAAK,OAAIZ,EAAAC,EAAAC,cAACL,EAAYe,MACvEZ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,KAAK,WAAWC,OAAQ,SAAAC,GAAK,OAAIZ,EAAAC,EAAAC,cAACJ,EAAYc,MACvEZ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOE,KAAK,IAAIC,KAAK,OAAOC,OAAQ,SAAAC,GAAK,OAAIZ,EAAAC,EAAAC,cAACf,EAAkByB,gBAX5DC,aCPEC,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCNNC,IAASP,OAAOX,EAAAC,EAAAC,cAACiB,EAAD,MAASrC,SAASsC,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3E,KAAK,SAAA4E,GACjCA,EAAaC","file":"static/js/main.9414f42e.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\"\nimport 'firebase/auth'\n\n\nconst fireB = firebase.initializeApp({\n    apiKey: \"AIzaSyBQZ7yuE-XXCIqpaBUHWBtaIhG8Qty9XJ0\",\n    authDomain: \"sphere-43a1d.firebaseapp.com\",\n    databaseURL: \"https://sphere-43a1d.firebaseio.com\",\n    projectId: \"sphere-43a1d\",\n    storageBucket: \"sphere-43a1d.appspot.com\",\n    messagingSenderId: \"51365263647\",\n    appId: \"1:51365263647:web:87d94eeae9ff416477182a\"\n\n})\n\n\nexport default fireB;","import app from \"./firebase\"\n\nclass Auth {\n    constructor() {\n      this.authenticated = {status:false,region:\"\",division:\"\"};\n    }\n  \n    login(cb) {\n      this.authenticated.status = true;\n      this.authenticated.region = \"KL\"\n      //this.handleLogin();\n      cb();\n    }\n  \n    logout(cb) {\n      this.authenticated.status = false;\n      this.authenticated.region = \"\"\n      cb();\n    }\n  \n    isAuthenticated() {\n      return this.authenticated;\n    }\n\n\n    handleLogin = (email,password,cb)   =>  {\n\n  \n      const dataForm = new FormData();\n        dataForm.append(\"username\", email);\n        dataForm.append(\"password\", password);\n\n\n\n        const requestOptions = {\n          method: 'POST',\n          body: dataForm\n      };\n\n      \n      var self = this\n      fetch('/loginprocess2', requestOptions)\n          .then(response =>\n           \n            response.json()\n            //console.log(response)\n          \n          )\n          .then(data => {\n            this.authenticated.status = true\n           console.log(data)\n           if(data.result ===\"ok\"){\n           cb()\n\n           \n\n            app.auth().signInWithCustomToken(data.token).catch(function(error) {\n\n\n              console.log(app.auth().currentUser.uid)\n              // Handle Errors here.\n              var errorCode = error.code;\n              var errorMessage = error.message;\n              // ...\n            \n            });\n\n\n            app.auth().onAuthStateChanged(function(user) {\n              if (user) {\n                // User is signed in.\n                console.log(user)\n              } else {\n                // No user is signed in.\n              }\n            });\n          \n          \n           }\n          }\n\n        )\n      \n        fetch('/loginprocess')\n        .then(response => \n         \n         response.statusText()\n        \n        )\n        .then(data => console.log(data))  \n           \n  \n    }\n\n\n    // handleLogin2 = (email,password,cb)   =>  {\n\n  \n    //   const dataForm = new FormData();\n    //     dataForm.append(\"username\", email);\n    //     dataForm.append(\"password\", password);\n\n\n\n    //     const requestOptions = {\n    //       method: 'POST',\n    //       body: dataForm\n    //   };\n    //   var self = this\n    //   fetch('/cas/login', requestOptions)\n    //       .then(response => response.json())\n    //       .then(data => {\n    //         this.authenticated.status = true\n    //        console.log(data)\n          \n          \n    //       //  if(data.result ===\"ok\"){\n    //       //  cb()\n\n           \n\n    //       //   app.auth().signInWithCustomToken(data.token).catch(function(error) {\n\n\n    //       //     console.log(app.auth().currentUser.uid)\n    //       //     // Handle Errors here.\n    //       //     var errorCode = error.code;\n    //       //     var errorMessage = error.message;\n    //       //     // ...\n            \n    //       //   });\n\n\n    //       //   app.auth().onAuthStateChanged(function(user) {\n    //       //     if (user) {\n    //       //       // User is signed in.\n    //       //       console.log(user)\n    //       //     } else {\n    //       //       // No user is signed in.\n    //       //     }\n    //       //   });\n          \n          \n    //       //  }\n    //       }\n\n    //     )\n      \n      \n  \n           \n  \n    // }\n\n\n}\n\n\n\n  \n  export default new Auth();\n  ","/*\n* required polyfills\n*/\nimport \"core-js\";\nimport 'core-js/features/set/map';\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol'\n// import 'core-js/es6/object'\n// import 'core-js/es6/function'\n// import 'core-js/es6/parse-int'\n// import 'core-js/es6/parse-float'\n// import 'core-js/es6/number'\n// import 'core-js/es6/math'\n// import 'core-js/es6/string'\n// import 'core-js/es6/date'\n// import 'core-js/es6/array'\n// import 'core-js/es6/regexp'\n// import 'core-js/es6/map'\n// import 'core-js/es6/weak-map'\n// import 'core-js/es6/set'\n// import 'core-js/es7/object'\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect'\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\n// import 'core-js/es7/reflect'\n\n// CustomEvent() constructor functionality in IE9, IE10, IE11\n(function () {\n\n  if ( typeof window.CustomEvent === \"function\" ) return false\n\n  function CustomEvent ( event, params ) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\n    var evt = document.createEvent( 'CustomEvent' )\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\n    return evt\n  }\n\n  CustomEvent.prototype = window.Event.prototype\n\n  window.CustomEvent = CustomEvent\n})()\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n// import { renderRoutes } from 'react-router-config';\nimport './App.scss';\nimport { ProtectedRoute } from './protectedroute';\n\nconst loading = () => <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>;\n\n// Containers\nconst DefaultLayout = React.lazy(() => import('./containers/DefaultLayout'));\n\n// Pages\nconst Login = React.lazy(() => import('./views/Pages/Login'));\nconst Register = React.lazy(() => import('./views/Pages/Register'));\nconst Page404 = React.lazy(() => import('./views/Pages/Page404'));\nconst Page500 = React.lazy(() => import('./views/Pages/Page500'));\n\nclass App extends Component {\n\n  render() {\n    return (\n      <HashRouter>\n          <React.Suspense fallback={loading()}>\n            <Switch>\n              <Route exact path=\"/login\" name=\"Login Page\" render={props => <Login {...props}/>} />\n              <Route exact path=\"/register\" name=\"Register Page\" render={props => <Register {...props}/>} />\n              <Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />\n              <Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />\n              <Route path=\"/\" name=\"Home\" render={props => <DefaultLayout {...props}/>} />\n            </Switch>\n          </React.Suspense>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9'; // For IE 9-11 support\nimport 'react-app-polyfill/stable';\n// import 'react-app-polyfill/ie11'; // For IE 11 support\nimport './polyfill'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}